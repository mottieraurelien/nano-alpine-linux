# Use a non-root user :
user aurel;

# Optimise the number of workers (basically the number of CPU logical cores) :
worker_processes 4;

# Set the maximum number of simultaneous connections that each worker can manage :
events {
    worker_connections 1024;
}

# Centralise the error logs in a single place :
error_log /var/log/nginx/error.log;

# Write the process ID of the master process to the following file :
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

# Define HTTP server settings :
server {

    # Redirect HTTP request to HTTPS (no choice) :
    listen 80;
    server_name nanonas.dev;
    return 301 https://$host$request_uri;

    # Disable PATCH and TRACE methods :
    if ($request_method ~ ^(PATCH|TRACE)$) {
        return 405;
    }

}

# Define HTTPS server settings :
server {

    # Expose NGINX over TLS and HTTP/2 for better compression (why not QUIC/HTTP/3 ?)
    listen 443 ssl http2;
    server_name nanonas.dev;

    # Define resolvers (Cloudflare, primary and secondary) :
    resolver 1.1.1.1 1.0.0.1;

    # Add certificates provided by Cloudflare to ensure strict encrypted traffic between server and Cloudflare :
    ssl_certificate /etc/certificates/certificate.crt;
    ssl_certificate_key /etc/certificates/private.key;

    # Support latest TLS version only to increase security :
    ssl_protocols TLSv1.3;

    # Enable strong TLS ciphers only :
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

    # Enable TLS session caching :
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;

    # Enable custom Diffie-Hellman parameters :
    ssl_dhparam /etc/certificates/dhparams.pem;

    # Enable OCSP stapling to improve the connection speed of the SSL handshake by combining two requests into one :
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/certificates/full_chain.pem;

    # Disable NGINX version number :
    # (to not help hackers to find the corresponding CVE) :
    server_tokens off;

    # Hide details about the technology stack and version used for an upstream service :
    # (to not help hackers to find the corresponding CVE) :
    proxy_hide_header X-Powered-By;

    # Enable HTTP Strict Transport Security (HSTS) to force all connections over TLS protocol :
    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';

    # Apply Content Security Policy (CSP) to prevent XSS and data injection attacks :
    add_header Content-Security-Policy "default-src 'self'; font-src *;img-src * data:; script-src *; style-src *";

    # Enable the X-XSS-Protection header to defend against Cross-Site Scripting attacks :
    # (settings here : when an XSS attack is detected, the browser will prevent rendering of the page)
    add_header X-XSS-Protection "1; mode=block" always;

    # Prevent websites from click-jacking attacks by disabling iframes :
    add_header X-Frame-Options SAMEORIGIN always;

    # Tell the browser to follow the MIME types indicated in the header to to prevent web browsers from sniffing
    # a response away from the declared Content-Type :
    add_header X-Content-Type-Options nosniff;

    # Check the referrer to identify the address of the webpage that requested the current webpage :
    add_header Referrer-Policy "strict-origin";

    # Adjust the permissions policy to allows websites to control which APIs or features can be used in the browser :
    add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()";

    # Control buffer overflow attacks :
    client_body_buffer_size  1K;
    client_header_buffer_size 1k;
    client_max_body_size 20M;
    large_client_header_buffers 2 1k;

    # Control timeouts to improve server performance and cut clients :
    client_body_timeout 10;
    client_header_timeout 10;
    keepalive_timeout 5 5;
    send_timeout 10;

    # Allow access from known public IPs and blocking everything else :
    allow 192.168.10.0/24; # Local network
    allow 192.168.11.0/24; # VPN network
    allow 125.59.217.57; # Home's public IP
    # allow 1.2.3.4; # Cloudflare's public IPs maybe ?
    # allow 1.2.3.4; # Brittany's public IP
    # allow 1.2.3.4; # Bruno's public IP
    # allow 1.2.3.4; # Fred's public IP
    deny all;

    # Include nested upstreams :
    # TODO : try to use wildcards in a folder so that we can ease adding independent upstreams :
    # LIKE : include /etc/nginx/.../upstreams/*.conf > nano /etc/nginx/sites-enabled/example.com-ssl.conf
    # TODO : do no forget proxy subdomains

    # Disable some useless HTTP methods :
    if ($request_method ~ ^(PATCH|SEARCH|TRACE)$) {
        return 405;
    }

    # Disable some user-agents like scanners, bots and spammers :
    if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
        return 403;
    }

    # Disable some other user-agents like robots :
    if ($http_user_agent ~* msnbot|scrapbot) {
        return 403;
    }

    # Block certain referrers :
    if ($http_referer ~* (babes|forsale|girl|jewelry|love|nudit|organic|poker|porn|sex|teen)) {
        return 403;
    }

}